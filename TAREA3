Forma Uno;
Forma Dos;
Forma Tres;
 Forma Cuatro;
 Forma Cinco;
 Forma Seis;
 Forma Siete;
 Forma Ocho;
float apo;
ArrayList <Forma> Formas;



void setup(){
  size(900,600);
  background(0);
  
  smooth();
  Uno= new Tria(10,10,10,10,10);
  Dos= new Cuad(10);
  Tres= new Rec(20,10);
  Cuatro= new Cir(16);
  Cinco= new Penta(16,8);
  Seis= new Hexa(16,8);
  Siete= new Hepta(16,8);
  Ocho= new Octa(16,8);
  Formas = new ArrayList();
 Formas.add(Uno);
 Formas.add(Dos);
 Formas.add(Tres);
  Formas.add(Cuatro);
 Formas.add(Cinco);
   Formas.add(Seis);
   Formas.add(Siete);
   Formas.add(Ocho);
   
   
   
   
   int cas=0, cex=0, cey=0, alto=0;
   int ancho=0;
  noStroke();
   
   /////
   float angi=0;
   
   fill(random(120),random(0),random(120));
   
  
   
   cex=200;
   cey=200;
   ancho=50;
   angi=-90;
   alto=50;
   cas=3;
   pol2(cas, cex,  cey, ancho,  alto, angi);
   
   cex=300;
   cey=200;
   angi=-45;
   ancho=50;
   alto=50;
   cas=4;
   pol2(cas, cex,  cey, ancho,  alto, angi);
   
   cex=400;
   cey=200;
   angi=-45;
   ancho=100;
   alto=50;
   cas=4;
   pol2(cas, cex,  cey, ancho,  alto, angi);
   
   cex=600;
   cey=200;
   angi=-90;
   ancho=80;
   alto=80;
   cas=5;
   pol2(cas, cex,  cey, ancho,  alto, angi);
      alto=80;
   ancho=80;
   cex=500;
   cey=400;
   ellipse(cex,cey,ancho,alto);
   
   cex=200;
   cey=400;
   angi=-90;
   ancho=80;
   alto=80;
   cas=6;
   pol2(cas, cex,  cey, ancho,  alto, angi);
   
   cex=300;
   cey=400;
   angi=-90;
   ancho=80;
   alto=80;
   cas=7;
   pol2(cas, cex,  cey, ancho,  alto, angi);
   cex=400;
   cey=400;
   angi=-90;
   ancho=80;
   alto=80;
   cas=8;
   pol2(cas, cex,  cey, ancho,  alto, angi);
   
    println(Uno.peri());
  println(Uno.area());
  println(Dos.peri());
  
  println(Dos.area());

  println(Tres.peri());
  
  println(Tres.area());
  println(Cuatro.peri());
  
  println(Cuatro.area());
  println(Cinco.peri());
  println(Cinco.apo());
    println(Cinco.area());
  
  println(Seis.peri());
  println(Seis.apo());
  println(Seis.area());
  
  println(Siete.peri());
  println(Siete.apo());
  println(Siete.area());
  
  println(Ocho.peri());
  println(Ocho.apo());
  println(Ocho.area());
   
}

void draw(){

 
 
 
}



void pol2(float cas, float cex, float cey, float ancho, float alto, float angi){
  float ang=360/cas;
  ancho=ancho/2;
  alto=alto/2;
  beginShape();
  for (int i=0; i<cas; i++){
   vertex(cex+ancho*cos(radians(angi)+radians(ang*i)),cey+alto*sin(radians(angi)+radians(ang*i))); 
  }
  endShape();
}
  
  
  interface Forma {
    float peri();
    float area();
     float apo();
    
    
  }
  class Tria implements Forma{
    float c1,c2,c3,b,h;
    
    Tria(float b_, float h_, float c1_, float c2_, float c3_){
      b=b_;
      h=h_;
      c1=c1_;
      c2=c2_;
      c3=c3_;
      
    }
    
    
   
    float peri(){
      return c1+c2+c3;
    }
    
    float area(){
      return ((b*h)/2);
    }
    float apo(){
    return 0;
    }
  }
  
  class Cuad implements Forma{
  float l;
  
  Cuad(float l_){
      l=l_;
  }
  
    
  
  
    float peri(){
      return l*4;
    }
    float area(){
    return l*l;  
    }
    float apo(){
    return 0;
    }
  }
  
  class Rec implements Forma{
  float l,a;
  
  Rec(float l_, float a_){
      l=l_;
      a=a_;
  }
  
    float peri(){
      return (l*2)+(a*2);
    }
    float area(){
    return l*a;  
    }
    float apo(){
    return 0;
    }
    
    
    
  }
  class Cir implements Forma{
  float r;
  
  Cir(int r_){
      r=r_;
     
  }
  
    float peri(){
      return (TWO_PI*r);
    }
    float area(){
    return (PI)*(r*r);
    }
    float apo(){
    return 0;
    }
    
    
  
  
  }
  class Penta implements Forma{
  float c1,c2;
  
  Penta(float c1_, float c2_) {
      c1=c1_;
      c2=c2_;
      
  }
      
     
  
  
    float peri(){
      return (c1*5);
    }
    float apo(){
    return sqrt((c1*c1)-(c2*c2));
    }
    float area(){
      float peri =c1*5; 
     float apo= sqrt((c1*c1)-(c2*c2));
     
    return ((peri*apo)/2);
    
    
    
  }
  
  }
   class Hexa implements Forma{
  float c1,c2;
  
  Hexa(float c1_, float c2_) {
      c1=c1_;
      c2=c2_;
      
  }
      
     
  
  
    float peri(){
      return c1*6;
    }
    float apo(){
    return sqrt((c1*c1)-(c2*c2));
    }
    float area(){
      float peri =c1*6; 
     float apo= sqrt((c1*c1)-(c2*c2));
     
    return ((peri*apo)/2);
    
    
    
  }
  
  }
  
   class Hepta implements Forma{
  float c1,c2;
  
  Hepta(float c1_, float c2_) {
      c1=c1_;
      c2=c2_;
      
  }
      
     
  
  
    float peri(){
      return c1*7;
    }
    float apo(){
    return sqrt((c1*c1)-(c2*c2));
    }
    float area(){
      float peri =c1*7; 
     float apo= sqrt((c1*c1)-(c2*c2));
     
    return ((peri*apo)/2);
    
    
    
  }
  
  }
  
  class Octa implements Forma{
  float c1,c2;
  
  
  Octa(float c1_, float c2_) {
      c1=c1_;
      c2=c2_;
      
  }
      
     
  
  
    float peri(){
      return c1*8;
    }
    float apo(){
    return sqrt((c1*c1)-(c2*c2));
    }
    float area(){
      float peri =c1*8; 
     float apo= sqrt((c1*c1)-(c2*c2));
     
    return ((peri*apo)/2);
    
   
  }
  
  
  }

 

